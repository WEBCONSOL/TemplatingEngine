<?php

namespace GX2CMS\TemplateEngine\Handlebars;

use GX2CMS\TemplateEngine\Util\Response;
use GX2CMS\TemplateEngine\Util\StringUtil;

class GX2CMContext extends Context
{
    public function __construct($context = null)
    {
        parent::__construct($context);
    }

    public function get($variableName, $strict = false)
    {
        if ($variableName instanceof StringWrapper) {
            $ret = (string)$variableName;
            if ($ret == "''") {
                $ret = "";
            }
            return $ret;
        }
        if (strpos($variableName, '||') !== false) {
            $parts = explode('||', $variableName);
            $val1 = $this->getConstant($parts[0]);
            if ($val1) {
                return $val1;
            }
            $val1 = parent::get($parts[0], $strict);
            if ($val1) {
                return $val1;
            }
            $val2 = $this->getConstant($parts[1]);
            if ($val2) {
                return $val2;
            }
            return parent::get($parts[1], $strict);
        }
        $constant = $this->getConstant($variableName);

        if ($constant) {
            return $constant;
        }
        else if ($variableName === "''") {
            return "";
        }
        else {
            $htmlBlock = $this->htmlBlock($variableName);
            if ($htmlBlock) {
                return $htmlBlock;
            }
            else {
                $val = parent::get($variableName, $strict);
                if (!$val) {
                    if ($variableName === 'item') {
                        $variableName = '@'.$variableName;
                    }
                    else if (StringUtil::startsWith($variableName, 'itemList.')) {
                        $parts = explode('.', strtolower($variableName));
                        $parts[0] = '@'.$parts[0];
                        $variableName = implode('', $parts);
                    }
                    else if (StringUtil::startsWith($variableName, 'item.')) {
                        $variableName = str_replace('item.', 'this.', $variableName);
                    }
                    $val = parent::get($variableName, $strict);
                    if ($val) {
                        return $val;
                    }
                }
                else {
                    return $val;
                }
            }
        }

        return parent::get($variableName, $strict); // TODO: Change the autogenerated stub
    }

    private function getConstant($varName): string {
        if (is_numeric($varName)) {
            return $varName;
        }
        if (is_bool($varName) || $varName === 'true' || $varName === 'false') {
            return $varName === 'false' || !$varName ? false : true;
        }
        $first = $varName[0];
        $last = $varName[strlen($varName)-1];
        if (($first === "'" && $last === "'") || ($first === '"' && $last === '"')) {
            if ($first === "'" && $last === "'") {
                $varName = substr($varName, 1, -1);
            }
            return $varName;
        }
        if ($first === "[" && $last === "]") {
            $arr = json_decode($varName, true);
            if ($arr) {
                return implode(',', $arr);
            }
            else {
                Response::renderPlaintext("Malformated literal: " . str_replace(array("'", '"'), '', $varName));
            }
        }
        return "";
    }

    private function htmlBlock($varName): string {
        if (StringUtil::hasTag($varName)) {
            return $varName;
        }
        return "";
    }
}